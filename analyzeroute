from math import sin, cos, sqrt, atan2, radians
import datetime
class RouteAnalyzer:
    EARTH_RAD = 6373.0
    TIME_WEIGHT = 0
    DISTANCE_WEIGHT = 0

    curr_time = datetime.datetime.now()
    def __init__(self, routes: list, crime_points: dict):
        self.routes = routes # routes are a list of routes
        self.crime_points = crime_points

    # NOTE: points are tuples in the form of (long, lat)
    # Credits: formula from Kurt Peek
    def calcDistanceTwoPoints(self, point1: tuple, point2: tuple) -> float:
        """Returns distance between two points for optim
        parameters:
        - point 1 and point 2 are in the form of (long, lat)

        Credits: formula from Kurt Peek
        """
        R = 6373.0

        lat1 = radians(point1[1])
        lon1 = radians(point1[0])
        lat2 = radians(point2[1])
        lon2 = radians(point2[0])

        dlon = lon2 - lon1
        dlat = lat2 - lat1

        a = sin(dlat / 2) ** 2 + cos(lat1) * cos(lat2) * sin(dlon / 2) ** 2
        c = 2 * atan2(sqrt(a), sqrt(1 - a))

        return R * c

    def calculateRouteScore(self, route_points: list[tuple]):
        # Note we only check the points in between, not including the destination point because
        # it cannot vary and should therefore not affect the score.

        # process: we want to compare each step point to each crime point. For each point -> compare each point

        total_route_score = 0
        for route_point in route_points:
            point_score = 0
            for crime_point in self.crime_points:
                if self.calcDistanceTwoPoints(crime_point, route_point)<=0.5:
                    time_score = -1/12 * abs(self.curr_time.hour - self.crime_points[crime_point]["OCC_HOUR"] ) + self.TIME_WEIGHT
                    distance_score = self.calcDistanceTwoPoints(crime_point, route_point) * self.DISTANCE_WEIGHT
                    point_score += time_score + distance_score + self.adjustPremiseType(self.crime_points[crime_point]["PREMISES_TYPE"]) + self.adjustMCIType()







    def adjustPremiseType(self, premise_type: str) -> float:
        if premise_type == 'Apartment':
            return 0
        elif premise_type == 'Outside':
            return 0
        elif premise_type == 'Transit':
            return 0
        elif premise_type == 'House':
            return 0
        elif premise_type == 'Commercial':
            return 0
        else:
            return 0

    def adjustMCIType(self, premise_type: str) -> float:
        if premise_type == 'Assault':
            return 0
        elif premise_type == 'Robbery':
            return 0
        elif premise_type == 'Auto Theft':
            return 0
        elif premise_type == 'Break and Enter':
            return 0
        elif premise_type == 'Theft Over':
            return 0
        else:
            return 0
